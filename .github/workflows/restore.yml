name: 恢复备份

on:
  workflow_dispatch:
    inputs:
      backup_url:
        description: '备份文件 URL'
        required: true
      confirm_restore:
        description: '确认恢复（输入 YES 确认）'
        required: true
      create_backup:
        description: '恢复前创建当前数据备份'
        type: boolean
        default: true

jobs:
  restore:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm_restore == 'YES' }}
    
    steps:
      - name: 创建当前数据备份
        if: ${{ github.event.inputs.create_backup == 'true' }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # 备份当前数据
          PGPASSWORD=${DATABASE_URL#*:*:*:*:} pg_dump \
            -h ${DATABASE_URL#*@} \
            -U ${DATABASE_URL#*//} \
            ${DATABASE_URL##*/} > current_backup.sql
          
          # 保存当前备份
          tar -czf current_backup.tar.gz current_backup.sql

      - name: 上传当前数据备份
        if: ${{ github.event.inputs.create_backup == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: pre_restore_backup
          path: current_backup.tar.gz
          retention-days: 30

      - name: 下载要恢复的备份
        run: |
          wget ${{ github.event.inputs.backup_url }} -O backup.tar.gz
          tar -xzf backup.tar.gz

      - name: 恢复数据库
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # 恢复数据
          PGPASSWORD=${DATABASE_URL#*:*:*:*:} psql \
            -h ${DATABASE_URL#*@} \
            -U ${DATABASE_URL#*//} \
            ${DATABASE_URL##*/} < */database.sql

      - name: 验证恢复
        run: |
          echo "数据恢复完成，请验证以下内容："
          echo "1. 数据库连接是否正常"
          echo "2. 数据是否完整"
          echo "3. 应用是否正常运行"
          
          # 如果需要回滚，可以使用 pre_restore_backup 