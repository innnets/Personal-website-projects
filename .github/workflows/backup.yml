name: Backup

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行
  workflow_dispatch:      # 手动触发

jobs:
  backup:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Create backup directories
        run: |
          mkdir -p backups/config
          mkdir -p backups/database
          mkdir -p backups/actions
          mkdir -p backups/sanity
          mkdir -p backups/public

      - name: Backup configuration files
        run: |
          # 配置文件备份
          cp .env* backups/config/ || true
          cp *.config.* backups/config/ || true
          cp tsconfig.json backups/config/ || true
          cp package.json backups/config/ || true
          cp pnpm-lock.yaml backups/config/ || true
          cp .eslintrc.* backups/config/ || true
          cp prettier.config.* backups/config/ || true

      - name: Backup GitHub Actions
        run: |
          # GitHub Actions 配置备份
          cp -r .github/workflows/* backups/actions/

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client-14

      - name: Parse database connection
        id: db-parse
        run: |
          # 解析数据库连接字符串
          if [[ "$DATABASE_URL" =~ ^postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+)$ ]]; then
            echo "DB_USER=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "DB_PASS=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "DB_HOST=${BASH_REMATCH[3]}" >> $GITHUB_ENV
            echo "DB_PORT=${BASH_REMATCH[4]}" >> $GITHUB_ENV
            echo "DB_NAME=${BASH_REMATCH[5]}" >> $GITHUB_ENV
          fi

      - name: Backup database
        run: |
          # 数据库备份
          PGPASSWORD=$DB_PASS pg_dump \
            -h $DB_HOST \
            -U $DB_USER \
            -p $DB_PORT \
            -d $DB_NAME \
            -F c \
            -f backups/database/backup.dump

      - name: Backup Sanity content
        env:
          SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
        run: |
          # 如果有 Sanity CLI，备份 Sanity 内容
          if [ -n "$SANITY_TOKEN" ]; then
            npx @sanity/cli dataset export production backups/sanity/content.tar.gz
          fi

      - name: Backup public files
        run: |
          # 备份公共文件
          cp -r public/* backups/public/ || true

      - name: Create compressed backup
        run: |
          tar -czf backup.tar.gz backups/

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: backup
          path: backup.tar.gz
          retention-days: 30

      - name: Create Release
        if: github.event_name == 'workflow_dispatch'  # 只在手动触发时创建发布
        uses: softprops/action-gh-release@v1
        with:
          files: backup.tar.gz
          name: Backup ${{ github.sha }}
          tag_name: backup-${{ github.sha }}
          body: |
            自动备份创建于 ${{ github.event.timestamp }}
            
            包含:
            - 配置文件
            - 数据库备份
            - GitHub Actions 配置
            - Sanity 内容
            - 公共文件
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 